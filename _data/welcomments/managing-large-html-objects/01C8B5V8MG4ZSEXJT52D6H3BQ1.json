{
  "id": "01C8B5V8MG4ZSEXJT52D6H3BQ1",
  "date": "2018-03-11T20:40:58.000",
  "author": {
    "name": "Colton Fischer",
    "website": "http://www.peoplesoftmods.com"
  },
  "message": "Thoughts on Component JavaScript Injection:\r\n\r\nI have had good/consistent experiences in 8.56 with using the AddJavaScript PeopleCode function to inject JS into Components.  However, this function is only designed to work on Fluid Components.  For Classic Component JS injection, I have had good experiences using a utility built by Jim Marion that leverages the Component Branding Framework in the PIA to configure the scripts that you want injected on Components.  He did a workshop on the workings of <a href=\"https://www.alliance-conference.com/e/in/eid=341&req=info&s=12984&all=1\" target=\"_blank\" rel=\"nofollow\">this utility at Alliance 2017</a>.  I have also had success with JS injection using a framework built by Sasank Vemana.  He has the source code and great documentation of <a href=\"https://pe0ples0ft.blogspot.com/p/javascript-injection-framework.html\" target=\"_blank\" rel=\"nofollow\">the framework on his blog</a>.\r\n \r\nThoughts on AddOnLoadScript issue:\r\n\r\nI have not personally tried using the PeopleCode AddOnLoadScript function, but I am not sure why it doesn't work when you attempt to pass a variable string into it.  If I understand correctly, you are storing some static HTML in a Message Catalog entry, fetching the Message Catalog text in the PeopleCode with MsgGetExplainText, and then binding the text to the AddOnLoadScript function.  You could maybe try using the %ExplainMessage Meta HTML function to bind the text to avoid binding in a variable.  However, I am not confident that the page will be able to resolve the Meta HTML at runtime.  This really seems like it could be a bug and I would suggest opening a case with My Oracle Support.  \r\n\r\nThoughts on Invoking PS JS Functions:\r\n\r\nUnfortunately, I don't really have any useful pointers for this.  I have read about the %formname Meta HTML that can help with resolving the dynamic form name (win0, win1, etc.) to make it so you don't have to hardcode form names in your JS.  Sasank has an <a href=\"https://pe0ples0ft.blogspot.com/2015/07/invoke-peoplecode-event-from-javascript.html\" target=\"_blank\" rel=\"nofollow\">interesting post on this topic</a> that may be of help.  In the post he uses an HTML area to hold the custom JS, but it is possible that you can inject the JS with the techniques mentioned above to avoid having to use an HTML area.\r\n\r\nHope this helps.",
  "migrated_fields": {
    "email": "4d496aa46c2247876cdd9588b8128ea0"
  }
}